/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @header          ...
 * @author          Jean-David Gadina <macmade@eosgarden>
 * @copyright       (c) 2012, eosgarden
 * @abstract        ...
 */

/*******************************************************************************
 * Copyright notice:
 * 
 * This file is based AsyncSocket project, originally created by Dustin Voss,
 * updated and maintained by Deusty Designs and the Mac development community.
 * 
 * The original project is placed in the public domain, and available
 * in GitHub: https://github.com/robbiehanson/CocoaAsyncSocket
 ******************************************************************************/

#import <Foundation/Foundation.h>

FOUNDATION_EXPORT NSString * const EOSSocketReadPacketException;

#define EOS_SOCKET_READ_PACKET_READALL_CHUNK_SIZE   256

@interface EOSSocketReadPacket: NSObject
{
@protected
    
    NSMutableData * _buffer;
    NSUInteger      _bytesRead;
    NSUInteger      _maxLength;
    NSTimeInterval  _timeout;
    BOOL            _readAllAvailableData;
    NSData        * _terminator;
    
@private
    
    id _EOSSocketReadPacket_Reserved[ 5 ] __attribute__( ( unused ) );
}

@property( atomic, readonly          ) NSMutableData * buffer;
@property( atomic, readwrite, assign ) NSUInteger      bytesRead;
@property( atomic, readonly          ) NSUInteger      maxLength;
@property( atomic, readonly          ) NSTimeInterval  timeout;
@property( atomic, readonly          ) BOOL            readAllAvailableData;
@property( atomic, readonly          ) NSData        * terminator;

- ( id )initWithData: ( NSMutableData * )data timeout:( NSTimeInterval )timeout maxLength:( NSUInteger )maxLength readAllAvailable:( BOOL )readAll terminator:( NSData * )terminator;

/*!
 * @method          ...
 * @abstract        ...
 * @return          ...
 * @description     For read packets with a set terminator, returns the safe
 *                  length of data that can be read without going over a
 *                  terminator, or the maximum length.
 *                  It is assumed the terminator has not already been read.
 */
- ( NSUInteger )lengthOfDataToTerminator;

/*!
 * @method          ...
 * @abstract        ...
 * @return          ...
 * @description     Assuming pre-buffering is enabled, returns the amount of
 *                  data that can be read without going over the maximum
 *                  length.
 */
- ( NSUInteger )lengthOfPreBufferedDataToTerminator;

/*!
 * @method          ...
 * @abstract        ...
 * @return          ...
 * @description     For read packets with a set terminator, scans the packet
 *                  buffer for the terminator.
 *                  It is assumed the terminator had not been fully read prior
 *                  to the new bytes.
 *                  If the terminator is found, the number of excess bytes
 *                  after the terminator is returned.
 *                  If the terminator is not found, this method will return -1.
 *                  A return value of zero means the terminator was found at
 *                  the very end.
 */
- ( NSInteger )searchForTerminatorAfterPreBuffering: ( NSUInteger )numberOfBytes;

@end
