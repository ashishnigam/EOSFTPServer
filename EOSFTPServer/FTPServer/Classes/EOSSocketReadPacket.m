/*******************************************************************************
 * Copyright (c) 2012, Jean-David Gadina <macmade@eosgarden.com>
 * Distributed under the Boost Software License, Version 1.0.
 * 
 * Boost Software License - Version 1.0 - August 17th, 2003
 * 
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 * 
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ******************************************************************************/

/* $Id$ */

/*!
 * @file            ...
 * @author          Jean-David Gadina <macmade@eosgarden>
 * @copyright       (c) 2012, eosgarden
 * @abstract        ...
 */

/*******************************************************************************
 * Copyright notice:
 * 
 * This file is based AsyncSocket project, originally created by Dustin Voss,
 * updated and maintained by Deusty Designs and the Mac development community.
 * 
 * The original project is placed in the public domain, and available
 * in GitHub: https://github.com/robbiehanson/CocoaAsyncSocket
 ******************************************************************************/

#import "EOSSocketReadPacket.h"
#import "EOSSocketReadPacket+Private.h"

NSString * const EOSSocketReadPacketException = @"EOSSocketReadPacketException";

@implementation EOSSocketReadPacket

@synthesize buffer                  = _buffer;
@synthesize bytesRead               = _bytesRead;
@synthesize maxLength               = _maxLength;
@synthesize timeout                 = _timeout;
@synthesize readAllAvailableData    = _readAllAvailableData;
@synthesize terminator              = _terminator;

- ( id )initWithData: ( NSMutableData * )data timeout:( NSTimeInterval )timeout maxLength:( NSUInteger )maxLength readAllAvailable:( BOOL )readAll terminator:( NSData * )terminator
{
    if( ( self = [ super init ] ) )
    {
        _buffer                 = [ data retain ];
        _timeout                = timeout;
        _readAllAvailableData   = readAll;
        _terminator             = [ terminator copy ];
        _bytesRead              = 0;
        _maxLength              = maxLength;
    }
    
    return self;
}

- ( void )dealloc
{
    [ _buffer       release ];
    [ _terminator   release ];
    
    [ super dealloc ];
}

- ( NSUInteger )lengthOfDataToTerminator
{
    const char * buffer;
    NSUInteger   length;
    NSInteger    i;
    NSInteger    j;
    
    if( _terminator == nil )
    {
        @throw [ NSException exceptionWithName: EOSSocketReadPacketException reason: @"No terminator is set" userInfo: nil ];
    }
    
    length  = [ _terminator length ];
    i       = MAX( 0, ( NSInteger )( _bytesRead - [ _terminator length ] + 1 ) );
    j       = MIN( [ _terminator length ] - 1, _bytesRead );
    
    while( ( NSUInteger )i < _bytesRead )
    {
        buffer = ( ( const char * )[ _buffer bytes ] ) + i;
        
        if( memcmp( buffer, [ _terminator bytes ], ( NSUInteger )j ) == 0 )
        {
            length = [ _terminator length ] - ( NSUInteger )j;
            break;
        }
        
        i++;
        j--;
    }
    
    if( _maxLength > 0 )
    {
        return MIN( length, ( _maxLength - _bytesRead ) );
    }
    else
    {
        return length;
    }
}

- ( NSUInteger )lengthOfPreBufferedDataToTerminator
{
    if( _maxLength > 0 )
    {
        return MIN( EOS_SOCKET_READ_PACKET_READALL_CHUNK_SIZE, ( _maxLength - _bytesRead ) );
    }
    else
    {
        return EOS_SOCKET_READ_PACKET_READALL_CHUNK_SIZE;
    }
}

- ( NSInteger )searchForTerminatorAfterPreBuffering: ( NSUInteger )numberOfBytes
{
    const char * buffer;
    NSInteger    i;
    
    if( _terminator == nil )
    {
        @throw [ NSException exceptionWithName: EOSSocketReadPacketException reason: @"No terminator is set" userInfo: nil ];
    }
    
    i = MAX( 0, ( NSInteger )( _bytesRead - numberOfBytes - [ _terminator length ] + 1 ) );
    
    while( ( NSUInteger )i + [ _terminator length ] <= _bytesRead )
    {
        buffer = ( ( const char * )[ _buffer bytes ] ) + i;
        
        if( memcmp( _buffer, [ _terminator bytes ], [ _terminator length ] ) == 0 )
        {
            return  ( NSInteger )_bytesRead - ( i + ( NSInteger )[ _terminator length ] );
        }
        
        i++;
    }
    
    return -1;
}

@end
